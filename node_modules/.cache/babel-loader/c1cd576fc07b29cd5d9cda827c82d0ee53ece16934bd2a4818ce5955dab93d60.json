{"ast":null,"code":"export const handleUpdateContact = (id, list, setList, updatedContactData) => {\n  fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updatedContactData)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    console.log(`Contact with id ${id} has been updated`);\n    // update the list of contacts after updating the contact\n    const updatedList = list.map(contact => {\n      if (contact.id === id) {\n        return {\n          ...contact,\n          ...updatedContactData\n        };\n      } else {\n        return contact;\n      }\n    });\n    setList(updatedList);\n  }).catch(error => console.error('Error updating data:', error));\n};","map":{"version":3,"names":["handleUpdateContact","id","list","setList","updatedContactData","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","console","log","updatedList","map","contact","catch","error"],"sources":["C:/Users/saket/Downloads/Contact_LIst_Reactjs-main/src/components/UpdateContact.js"],"sourcesContent":["export const handleUpdateContact = (id, list, setList, updatedContactData) => {\n  fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(updatedContactData),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      console.log(`Contact with id ${id} has been updated`);\n      // update the list of contacts after updating the contact\n      const updatedList = list.map((contact) => {\n        if (contact.id === id) {\n          return {\n            ...contact,\n            ...updatedContactData,\n          };\n        } else {\n          return contact;\n        }\n      });\n      setList(updatedList);\n    })\n    .catch((error) => console.error('Error updating data:', error));\n};\n"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAGA,CAACC,EAAE,EAAEC,IAAI,EAAEC,OAAO,EAAEC,kBAAkB,KAAK;EAC5EC,KAAK,CAAE,8CAA6CJ,EAAG,EAAC,EAAE;IACxDK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,kBAAkB;EACzC,CAAC,CAAC,CACCO,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACAC,OAAO,CAACC,GAAG,CAAE,mBAAkBf,EAAG,mBAAkB,CAAC;IACrD;IACA,MAAMgB,WAAW,GAAGf,IAAI,CAACgB,GAAG,CAAEC,OAAO,IAAK;MACxC,IAAIA,OAAO,CAAClB,EAAE,KAAKA,EAAE,EAAE;QACrB,OAAO;UACL,GAAGkB,OAAO;UACV,GAAGf;QACL,CAAC;MACH,CAAC,MAAM;QACL,OAAOe,OAAO;MAChB;IACF,CAAC,CAAC;IACFhB,OAAO,CAACc,WAAW,CAAC;EACtB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAKN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;AACnE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}